# docker-compose.yml - PRODUCTION-READY VERSION
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - accounting-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - accounting-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Core Services
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - GO_ENV=production
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  transaction-service:
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ACCOUNT_SERVICE_URL=http://account-service:8002
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  invoice-service:
    build:
      context: ./invoice-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  vendor-service:
    build:
      context: ./vendor-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  report-service:
    build:
      context: ./report-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - ACCOUNT_SERVICE_URL=http://account-service:8002
      - TRANSACTION_SERVICE_URL=http://transaction-service:8003
      - INVOICE_SERVICE_URL=http://invoice-service:8004
    networks:
      - accounting-network
    restart: unless-stopped

  tax-service:
    build:
      context: ./tax-service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - accounting-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  currency-service:
    build:
      context: ./currency-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - EXCHANGE_API_KEY=${EXCHANGE_API_KEY}
    networks:
      - accounting-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    networks:
      - accounting-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - USER_SERVICE_URL=http://user-service:8001
      - ACCOUNT_SERVICE_URL=http://account-service:8002
      - TRANSACTION_SERVICE_URL=http://transaction-service:8003
      - INVOICE_SERVICE_URL=http://invoice-service:8004
      - VENDOR_SERVICE_URL=http://vendor-service:8005
      - INVENTORY_SERVICE_URL=http://inventory-service:8006
      - REPORT_SERVICE_URL=http://report-service:8007
      - TAX_SERVICE_URL=http://tax-service:8008
      - CURRENCY_SERVICE_URL=http://currency-service:8009
      - NOTIFICATION_SERVICE_URL=http://notification-service:8010
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - accounting-network
    depends_on:
      - user-service
      - account-service
      - transaction-service
      - invoice-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - NODE_ENV=production
    networks:
      - accounting-network
    depends_on:
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  accounting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16